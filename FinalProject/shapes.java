//
//  shapes.java
//
//  Routines for shape-drawing functions.
//
//  @author Vasudev &
// Contributor: Niyati Shah
//

public class shapes extends simpleShape {

	/**
	 * Object selection variables
	 */
	public static final int OBJ_QUAD = 0;
	// public static final int OBJ_TEAPOT = 1;

	public static final int OBJ_SPHERE = 1;
	public static final int OBJ_RING = 2;
	public static final int OBJ_WING = 3;
	public static final int OBJ_TAIL = 4;
	public static final int OBJ_CUBE = 5;

	/**
	 * Constructor
	 */
	public shapes() {
	}

	/**
	 * Each group of three values specifies a cube vertex
	 */

	float[] CubeVertices = { -7.079042f, 0.974035f, 6.456784f, -7.079042f, -0.058453f, 6.456784f, -7.079042f, 0.974035f,
			7.489272f, -7.079042f, -0.058453f, 7.489272f, -8.111529f, 0.974035f, 6.456784f, -8.111529f, -0.058453f,
			6.456784f, -8.111529f, 0.974035f, 7.489272f, -8.111529f, -0.058453f, 7.489272f };
	float[] CubeNormals = { -1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -1.000000f, 1.000000f, 0.000000f,
			0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, -1.000000f, 0.000000f, 0.000000f, 1.000000f,
			0.000000f };
	int[] CubeElements = { 3, 0, 1, 7, 2, 3, 5, 6, 7, 1, 4, 5, 2, 4, 0, 7, 1, 5, 3, 2, 0, 7, 6, 2, 5, 4, 6, 1, 0, 4, 2,
			6, 4, 7, 3, 1 };
	int[] CubeNormalIndices = { 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3,
			3, 4, 4, 4, 5, 5, 5 };

	/**
	 * Each group of three values specifies a Tail vertex
	 */
	float[] TailVertices = { -7.576985f, -0.500425f, 6.457372f, -7.216124f, -0.500425f, 6.606845f, -7.066650f,
			-0.500425f, 6.967707f, -7.576985f, 0.520245f, 6.967707f, -7.216124f, -0.500425f, 7.328568f, -7.576985f,
			-0.500425f, 7.478042f, -7.937846f, -0.500425f, 7.328568f, -8.087319f, -0.500425f, 6.967707f, -7.937846f,
			-0.500425f, 6.606845f };
	float[] TailNormals = { 0.347400f, 0.419400f, -0.838700f, 0.838700f, 0.419400f, -0.347400f, 0.838700f, 0.419400f,
			0.347400f, 0.347400f, 0.419400f, 0.838700f, -0.347400f, 0.419400f, 0.838700f, -0.838700f, 0.419400f,
			0.347400f, -0.838700f, 0.419400f, -0.347400f, -0.347400f, 0.419400f, -0.838700f, 0.000000f, -1.000000f,
			0.000000f };
	int[] TailElements = { 0, 3, 1, 1, 3, 2, 2, 3, 4, 4, 3, 5, 5, 3, 6, 6, 3, 7, 7, 3, 8, 8, 3, 0, 4, 7, 8, 8, 0, 1, 1,
			2, 4, 4, 5, 6, 6, 7, 4, 8, 1, 4 };
	int[] TailNormalIndices = { 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8,
			8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 };

	/**
	 * Each group of three values specifies a wing vertex
	 */
	float[] WingVertices = { -10.937069f, 0.727324f, 5.123957f, -10.929811f, 0.822551f, 5.115332f, -10.383381f,
			0.614948f, 4.349144f, -10.376123f, 0.710175f, 4.340519f, -4.313970f, 0.652227f, 9.867772f, -4.306712f,
			0.747454f, 9.859147f, -3.760282f, 0.539851f, 9.092959f, -3.753024f, 0.635078f, 9.084334f };
	float[] WingNormals = { -0.812900f, 0.009200f, -0.582300f, 0.577400f, -0.117200f, -0.808000f, 0.812900f, -0.009200f,
			0.582300f, -0.577400f, 0.117200f, 0.808000f, -0.075700f, -0.993100f, 0.089900f, 0.075700f, 0.993100f,
			-0.089900f };
	int[] WingElements = { 3, 0, 1, 7, 2, 3, 5, 6, 7, 5, 0, 4, 2, 4, 0, 7, 1, 5, 3, 2, 0, 7, 6, 2, 5, 4, 6, 5, 1, 0, 2,
			6, 4, 7, 3, 1 };
	int[] WingNormalIndices = { 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3,
			3, 4, 4, 4, 5, 5, 5 };

	/**
	 * Each group of three values specifies a sphere vertex
	 */
	float[] SphereVertices = { -0.500000f, 0.866025f, 0.000000f, -0.866025f, 0.500000f, 0.000000f, -1.000000f,
			-0.000000f, 0.000000f, -0.866025f, -0.500000f, 0.000000f, -0.500000f, -0.866025f, 0.000000f, -0.433013f,
			0.866025f, -0.250000f, -0.750000f, 0.500000f, -0.433013f, -0.866025f, -0.000000f, -0.500000f, -0.750000f,
			-0.500000f, -0.433013f, -0.433013f, -0.866025f, -0.250000f, -0.250000f, 0.866025f, -0.433013f, -0.433013f,
			0.500000f, -0.750000f, -0.500000f, -0.000000f, -0.866025f, -0.433013f, -0.500000f, -0.750000f, -0.250000f,
			-0.866025f, -0.433013f, -0.000000f, 0.866025f, -0.500000f, -0.000000f, 0.500000f, -0.866025f, -0.000000f,
			-0.000000f, -1.000000f, -0.000000f, -0.500000f, -0.866025f, -0.000000f, -0.866025f, -0.500000f, -0.000000f,
			1.000000f, 0.000000f, 0.250000f, 0.866025f, -0.433013f, 0.433013f, 0.500000f, -0.750000f, 0.500000f,
			-0.000000f, -0.866025f, 0.433012f, -0.500000f, -0.750000f, 0.250000f, -0.866025f, -0.433013f, 0.433012f,
			0.866025f, -0.250000f, 0.750000f, 0.500000f, -0.433013f, 0.866025f, -0.000000f, -0.500000f, 0.750000f,
			-0.500000f, -0.433013f, 0.433012f, -0.866025f, -0.250000f, 0.500000f, 0.866025f, 0.000000f, 0.866025f,
			0.500000f, 0.000000f, 1.000000f, -0.000000f, 0.000000f, 0.866025f, -0.500000f, 0.000000f, 0.500000f,
			-0.866025f, -0.000000f, 0.433012f, 0.866025f, 0.250000f, 0.750000f, 0.500000f, 0.433013f, 0.866025f,
			-0.000000f, 0.500000f, 0.750000f, -0.500000f, 0.433013f, 0.433012f, -0.866025f, 0.250000f, 0.250000f,
			0.866025f, 0.433013f, 0.433012f, 0.500000f, 0.750000f, 0.500000f, -0.000000f, 0.866025f, 0.433012f,
			-0.500000f, 0.750000f, 0.250000f, -0.866025f, 0.433013f, -0.000000f, -1.000000f, 0.000000f, -0.000000f,
			0.866025f, 0.500000f, -0.000000f, 0.500000f, 0.866025f, -0.000000f, -0.000000f, 1.000000f, -0.000000f,
			-0.500000f, 0.866025f, -0.000000f, -0.866025f, 0.500000f, -0.250000f, 0.866025f, 0.433012f, -0.433013f,
			0.500000f, 0.750000f, -0.500000f, -0.000000f, 0.866025f, -0.433013f, -0.500000f, 0.750000f, -0.250000f,
			-0.866025f, 0.433013f, -0.433013f, 0.866025f, 0.250000f, -0.750000f, 0.500000f, 0.433013f, -0.866025f,
			-0.000000f, 0.500000f, -0.750000f, -0.500000f, 0.433013f, -0.433013f, -0.866025f, 0.250000f };

	float[] SphereNormals = { -0.694700f, 0.694700f, -0.186200f, -0.694700f, -0.694700f, -0.186200f, -0.935100f,
			0.250600f, -0.250600f, -0.258200f, 0.963600f, -0.069200f, -0.258200f, -0.963600f, -0.069200f, -0.935100f,
			-0.250600f, -0.250600f, -0.508600f, -0.694700f, -0.508600f, -0.684600f, 0.250600f, -0.684600f, -0.189000f,
			0.963600f, -0.189000f, -0.189000f, -0.963600f, -0.189000f, -0.684600f, -0.250600f, -0.684600f, -0.508600f,
			0.694700f, -0.508600f, -0.186200f, -0.694700f, -0.694700f, -0.250600f, 0.250600f, -0.935100f, -0.069200f,
			0.963600f, -0.258200f, -0.069200f, -0.963600f, -0.258200f, -0.250600f, -0.250600f, -0.935100f, -0.186200f,
			0.694700f, -0.694700f, 0.250600f, 0.250600f, -0.935100f, 0.069200f, 0.963600f, -0.258200f, 0.069200f,
			-0.963600f, -0.258200f, 0.250600f, -0.250600f, -0.935100f, 0.186200f, 0.694700f, -0.694700f, 0.186200f,
			-0.694700f, -0.694700f, 0.189000f, 0.963600f, -0.189000f, 0.189000f, -0.963600f, -0.189000f, 0.684600f,
			-0.250600f, -0.684600f, 0.508600f, 0.694700f, -0.508600f, 0.508600f, -0.694700f, -0.508600f, 0.684600f,
			0.250600f, -0.684600f, 0.258200f, -0.963600f, -0.069200f, 0.935100f, -0.250600f, -0.250600f, 0.694700f,
			0.694700f, -0.186200f, 0.694700f, -0.694700f, -0.186200f, 0.935100f, 0.250600f, -0.250600f, 0.258200f,
			0.963600f, -0.069200f, 0.258200f, -0.963600f, 0.069200f, 0.935100f, -0.250600f, 0.250600f, 0.694700f,
			0.694700f, 0.186200f, 0.694700f, -0.694700f, 0.186200f, 0.935100f, 0.250600f, 0.250600f, 0.258200f,
			0.963600f, 0.069200f, 0.189000f, -0.963600f, 0.189000f, 0.684600f, -0.250600f, 0.684600f, 0.508600f,
			0.694700f, 0.508600f, 0.508600f, -0.694700f, 0.508600f, 0.684600f, 0.250600f, 0.684600f, 0.189000f,
			0.963600f, 0.189000f, 0.250600f, -0.250600f, 0.935100f, 0.186200f, 0.694700f, 0.694700f, 0.186200f,
			-0.694700f, 0.694700f, 0.250600f, 0.250600f, 0.935100f, 0.069200f, 0.963600f, 0.258200f, 0.069200f,
			-0.963600f, 0.258200f, -0.186200f, 0.694700f, 0.694700f, -0.186200f, -0.694700f, 0.694700f, -0.250600f,
			0.250600f, 0.935100f, -0.069200f, 0.963600f, 0.258200f, -0.069200f, -0.963600f, 0.258200f, -0.250600f,
			-0.250600f, 0.935100f, -0.508600f, -0.694700f, 0.508600f, -0.684600f, 0.250600f, 0.684600f, -0.189000f,
			0.963600f, 0.189000f, -0.189000f, -0.963600f, 0.189000f, -0.684600f, -0.250600f, 0.684600f, -0.508600f,
			0.694700f, 0.508600f, -0.694700f, -0.694700f, 0.186200f, -0.935100f, 0.250600f, 0.250600f, -0.258200f,
			0.963600f, 0.069200f, -0.258200f, -0.963600f, 0.069200f, -0.935100f, -0.250600f, 0.250600f, -0.694700f,
			0.694700f, 0.186200f };
	int[] SphereElements = { 0, 6, 1, 3, 9, 4, 1, 7, 2, 0, 20, 5, 46, 4, 9, 2, 8, 3, 8, 14, 9, 6, 12, 7, 5, 20, 10, 46,
			9, 14, 7, 13, 8, 5, 11, 6, 13, 19, 14, 11, 17, 12, 10, 20, 15, 46, 14, 19, 12, 18, 13, 11, 15, 16, 16, 23,
			17, 15, 20, 21, 46, 19, 25, 17, 24, 18, 16, 21, 22, 18, 25, 19, 21, 20, 26, 46, 25, 30, 23, 29, 24, 21, 27,
			22, 24, 30, 25, 22, 28, 23, 46, 30, 35, 28, 34, 29, 26, 32, 27, 29, 35, 30, 27, 33, 28, 26, 20, 31, 46, 35,
			40, 34, 38, 39, 31, 37, 32, 34, 40, 35, 32, 38, 33, 31, 20, 36, 46, 40, 45, 38, 44, 39, 36, 42, 37, 39, 45,
			40, 37, 43, 38, 36, 20, 41, 44, 49, 50, 41, 48, 42, 45, 50, 51, 42, 49, 43, 41, 20, 47, 46, 45, 51, 47, 53,
			48, 50, 56, 51, 48, 54, 49, 47, 20, 52, 46, 51, 56, 49, 55, 50, 55, 61, 56, 54, 58, 59, 52, 20, 57, 46, 56,
			61, 54, 60, 55, 52, 58, 53, 60, 4, 61, 59, 1, 2, 57, 20, 0, 46, 61, 4, 59, 3, 60, 57, 1, 58, 0, 5, 6, 3, 8,
			9, 1, 6, 7, 2, 7, 8, 8, 13, 14, 6, 11, 12, 7, 12, 13, 5, 10, 11, 13, 18, 19, 11, 16, 17, 12, 17, 18, 11, 10,
			15, 16, 22, 23, 17, 23, 24, 16, 15, 21, 18, 24, 25, 23, 28, 29, 21, 26, 27, 24, 29, 30, 22, 27, 28, 28, 33,
			34, 26, 31, 32, 29, 34, 35, 27, 32, 33, 34, 33, 38, 31, 36, 37, 34, 39, 40, 32, 37, 38, 38, 43, 44, 36, 41,
			42, 39, 44, 45, 37, 42, 43, 44, 43, 49, 41, 47, 48, 45, 44, 50, 42, 48, 49, 47, 52, 53, 50, 55, 56, 48, 53,
			54, 49, 54, 55, 55, 60, 61, 54, 53, 58, 54, 59, 60, 52, 57, 58, 60, 3, 4, 59, 58, 1, 59, 2, 3, 57, 0, 1 };

	int[] SphereNormalIndices = { 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9,
			9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18,
			18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27,
			27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36,
			36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45,
			45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54,
			54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63,
			63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 0, 0, 0,
			1, 1, 1, 2, 2, 2, 5, 5, 5, 6, 6, 6, 7, 7, 7, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 16, 16, 16, 17,
			17, 17, 18, 18, 18, 21, 21, 21, 22, 22, 22, 23, 23, 23, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31,
			31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 43, 43, 43, 44,
			44, 44, 45, 45, 45, 46, 46, 46, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 54, 54, 54, 55, 55, 55, 56,
			56, 56, 59, 59, 59, 60, 60, 60, 61, 61, 61, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 70, 70, 70, 71,
			71, 71 };

	/**
	 * Each group of three values specifies a ring vertex
	 */
	float[] RingVertices = { 2.608348f, 0.006193f, 0.012434f, 2.344519f, 0.028955f, 0.012434f, 1.816861f, 0.028955f,
			0.012434f, 1.553033f, 0.006193f, 0.012434f, 1.816861f, -0.016569f, 0.012434f, 2.344519f, -0.016569f,
			0.012434f, 2.479221f, 0.006193f, -0.724321f, 2.228305f, 0.028955f, -0.650646f, 1.726473f, 0.028955f,
			-0.503295f, 1.475556f, 0.006193f, -0.429619f, 1.726473f, -0.016569f, -0.503295f, 2.228305f, -0.016569f,
			-0.650646f, 2.104480f, 0.006193f, -1.388959f, 1.891038f, 0.028955f, -1.248819f, 1.464154f, 0.028955f,
			-0.968541f, 1.250712f, 0.006193f, -0.828402f, 1.464154f, -0.016569f, -0.968541f, 1.891038f, -0.016569f,
			-1.248819f, 1.520806f, 0.006193f, -1.916418f, 1.365731f, 0.028955f, -1.723533f, 1.055582f, 0.028955f,
			-1.337762f, 0.900508f, 0.006193f, -1.144877f, 1.055582f, -0.016569f, -1.337762f, 1.365731f, -0.016569f,
			-1.723533f, 0.785336f, 0.006193f, -2.255067f, 0.703808f, 0.028955f, -2.028317f, 0.540753f, 0.028955f,
			-1.574817f, 0.459225f, 0.006193f, -1.348066f, 0.540753f, -0.016569f, -1.574817f, 0.703808f, -0.016569f,
			-2.028317f, -0.029940f, 0.006193f, -2.371758f, -0.029940f, 0.028955f, -2.133338f, -0.029940f, 0.028955f,
			-1.656500f, -0.029940f, 0.006193f, -1.418081f, -0.029940f, -0.016569f, -1.656500f, -0.029940f, -0.016569f,
			-2.133338f, -0.845216f, 0.006193f, -2.255067f, -0.763689f, 0.028955f, -2.028317f, -0.600634f, 0.028955f,
			-1.574817f, -0.519106f, 0.006193f, -1.348066f, -0.600634f, -0.016569f, -1.574817f, -0.763689f, -0.016569f,
			-2.028317f, -1.580688f, 0.006193f, -1.916417f, -1.425613f, 0.028955f, -1.723532f, -1.115463f, 0.028955f,
			-1.337762f, -0.960389f, 0.006193f, -1.144877f, -1.115463f, -0.016569f, -1.337762f, -1.425613f, -0.016569f,
			-1.723532f, -2.164361f, 0.006193f, -1.388958f, -1.950919f, 0.028955f, -1.248819f, -1.524035f, 0.028955f,
			-0.968540f, -1.310593f, 0.006193f, -0.828401f, -1.524035f, -0.016569f, -0.968540f, -1.950919f, -0.016569f,
			-1.248819f, -2.539102f, 0.006193f, -0.724322f, -2.288186f, 0.028955f, -0.650646f, -1.786353f, 0.028955f,
			-0.503295f, -1.535437f, 0.006193f, -0.429619f, -1.786353f, -0.016569f, -0.503295f, -2.288186f, -0.016569f,
			-0.650646f, -2.668228f, 0.006193f, 0.012434f, -2.404400f, 0.028955f, 0.012434f, -1.876742f, 0.028955f,
			0.012434f, -1.612913f, 0.006193f, 0.012434f, -1.876742f, -0.016569f, 0.012434f, -2.404400f, -0.016569f,
			0.012434f, -2.539102f, 0.006193f, 0.749189f, -2.288186f, 0.028955f, 0.675514f, -1.786353f, 0.028955f,
			0.528163f, -1.535437f, 0.006193f, 0.454487f, -1.786353f, -0.016569f, 0.528163f, -2.288186f, -0.016569f,
			0.675514f, -2.164361f, 0.006193f, 1.413826f, -1.950919f, 0.028955f, 1.273687f, -1.524035f, 0.028955f,
			0.993409f, -1.310593f, 0.006193f, 0.853270f, -1.524035f, -0.016569f, 0.993409f, -1.950919f, -0.016569f,
			1.273687f, -1.580688f, 0.006193f, 1.941286f, -1.425613f, 0.028955f, 1.748401f, -1.115463f, 0.028955f,
			1.362630f, -0.960389f, 0.006193f, 1.169745f, -1.115463f, -0.016569f, 1.362630f, -1.425613f, -0.016569f,
			1.748401f, -0.845216f, 0.006193f, 2.279935f, -0.763689f, 0.028955f, 2.053185f, -0.600634f, 0.028955f,
			1.599685f, -0.519106f, 0.006193f, 1.372935f, -0.600634f, -0.016569f, 1.599685f, -0.763689f, -0.016569f,
			2.053185f, -0.029940f, 0.006193f, 2.396626f, -0.029940f, 0.028955f, 2.158207f, -0.029940f, 0.028955f,
			1.681369f, -0.029940f, 0.006193f, 1.442949f, -0.029940f, -0.016569f, 1.681369f, -0.029940f, -0.016569f,
			2.158207f, 0.785336f, 0.006193f, 2.279935f, 0.703808f, 0.028955f, 2.053185f, 0.540753f, 0.028955f,
			1.599685f, 0.459225f, 0.006193f, 1.372935f, 0.540753f, -0.016569f, 1.599685f, 0.703808f, -0.016569f,
			2.053185f, 1.520805f, 0.006193f, 1.941287f, 1.365731f, 0.028955f, 1.748402f, 1.055582f, 0.028955f,
			1.362631f, 0.900507f, 0.006193f, 1.169746f, 1.055582f, -0.016569f, 1.362631f, 1.365731f, -0.016569f,
			1.748402f, 2.104479f, 0.006193f, 1.413828f, 1.891037f, 0.028955f, 1.273689f, 1.464153f, 0.028955f,
			0.993410f, 1.250711f, 0.006193f, 0.853271f, 1.464153f, -0.016569f, 0.993410f, 1.891037f, -0.016569f,
			1.273689f, 2.479220f, 0.006193f, 0.749191f, 2.228304f, 0.028955f, 0.675515f, 1.726472f, 0.028955f,
			0.528164f, 1.475556f, 0.006193f, 0.454488f, 1.726472f, -0.016569f, 0.528164f, 2.228304f, -0.016569f,
			0.675515f };
	float[] RingNormals = { 0.085900f, 0.996200f, -0.015100f, 0.000000f, 1.000000f, 0.000000f, -0.085900f, 0.996200f,
			0.015100f, -0.085900f, -0.996200f, 0.015100f, 0.000000f, -1.000000f, 0.000000f, 0.085900f, -0.996200f,
			-0.015100f, 0.077500f, 0.996000f, -0.043700f, -0.077500f, 0.996000f, 0.043700f, -0.077500f, -0.996000f,
			0.043700f, 0.077500f, -0.996000f, -0.043700f, 0.061500f, 0.995800f, -0.068100f, -0.061500f, 0.995800f,
			0.068100f, -0.061500f, -0.995800f, 0.068100f, 0.061500f, -0.995800f, -0.068100f, 0.039500f, 0.995500f,
			-0.085700f, -0.039500f, 0.995500f, 0.085700f, -0.039500f, -0.995500f, 0.085700f, 0.039500f, -0.995500f,
			-0.085700f, 0.013600f, 0.995400f, -0.095000f, -0.013600f, 0.995400f, 0.095000f, -0.013600f, -0.995400f,
			0.095000f, 0.013600f, -0.995400f, -0.095000f, -0.013600f, 0.995400f, -0.095000f, 0.013600f, 0.995400f,
			0.095000f, 0.013600f, -0.995400f, 0.095000f, -0.013600f, -0.995400f, -0.095000f, -0.039500f, 0.995500f,
			-0.085700f, 0.039500f, 0.995500f, 0.085700f, 0.039500f, -0.995500f, 0.085700f, -0.039500f, -0.995500f,
			-0.085700f, -0.061500f, 0.995800f, -0.068100f, 0.061500f, 0.995800f, 0.068100f, 0.061500f, -0.995800f,
			0.068100f, -0.061500f, -0.995800f, -0.068100f, -0.077500f, 0.996000f, -0.043700f, 0.077500f, 0.996000f,
			0.043700f, 0.077500f, -0.996000f, 0.043700f, -0.077500f, -0.996000f, -0.043700f, -0.085900f, 0.996200f,
			-0.015100f, 0.085900f, 0.996200f, 0.015100f, 0.085900f, -0.996200f, 0.015100f, -0.085900f, -0.996200f,
			-0.015100f };
	int[] RingElements = { 6, 1, 0, 7, 2, 1, 8, 3, 2, 3, 10, 4, 4, 11, 5, 5, 6, 0, 12, 7, 6, 13, 8, 7, 14, 9, 8, 9, 16,
			10, 10, 17, 11, 11, 12, 6, 18, 13, 12, 19, 14, 13, 20, 15, 14, 15, 22, 16, 16, 23, 17, 17, 18, 12, 24, 19,
			18, 25, 20, 19, 26, 21, 20, 21, 28, 22, 22, 29, 23, 23, 24, 18, 30, 25, 24, 31, 26, 25, 32, 27, 26, 27, 34,
			28, 28, 35, 29, 29, 30, 24, 30, 37, 31, 31, 38, 32, 32, 39, 33, 39, 34, 33, 40, 35, 34, 41, 30, 35, 36, 43,
			37, 37, 44, 38, 38, 45, 39, 45, 40, 39, 46, 41, 40, 47, 36, 41, 42, 49, 43, 43, 50, 44, 44, 51, 45, 51, 46,
			45, 52, 47, 46, 53, 42, 47, 48, 55, 49, 49, 56, 50, 50, 57, 51, 57, 52, 51, 58, 53, 52, 59, 48, 53, 54, 61,
			55, 55, 62, 56, 56, 63, 57, 63, 58, 57, 64, 59, 58, 65, 54, 59, 66, 61, 60, 67, 62, 61, 68, 63, 62, 63, 70,
			64, 64, 71, 65, 65, 66, 60, 72, 67, 66, 73, 68, 67, 74, 69, 68, 69, 76, 70, 70, 77, 71, 71, 72, 66, 78, 73,
			72, 79, 74, 73, 80, 75, 74, 75, 82, 76, 76, 83, 77, 77, 78, 72, 84, 79, 78, 85, 80, 79, 86, 81, 80, 81, 88,
			82, 82, 89, 83, 83, 84, 78, 90, 85, 84, 91, 86, 85, 92, 87, 86, 87, 94, 88, 88, 95, 89, 89, 90, 84, 90, 97,
			91, 91, 98, 92, 92, 99, 93, 99, 94, 93, 100, 95, 94, 101, 90, 95, 96, 103, 97, 97, 104, 98, 98, 105, 99,
			105, 100, 99, 106, 101, 100, 107, 96, 101, 102, 109, 103, 103, 110, 104, 104, 111, 105, 111, 106, 105, 112,
			107, 106, 113, 102, 107, 108, 115, 109, 109, 116, 110, 110, 117, 111, 117, 112, 111, 118, 113, 112, 119,
			108, 113, 114, 1, 115, 115, 2, 116, 116, 3, 117, 3, 118, 117, 4, 119, 118, 5, 114, 119, 6, 7, 1, 7, 8, 2, 8,
			9, 3, 3, 9, 10, 4, 10, 11, 5, 11, 6, 12, 13, 7, 13, 14, 8, 14, 15, 9, 9, 15, 16, 10, 16, 17, 11, 17, 12, 18,
			19, 13, 19, 20, 14, 20, 21, 15, 15, 21, 22, 16, 22, 23, 17, 23, 18, 24, 25, 19, 25, 26, 20, 26, 27, 21, 21,
			27, 28, 22, 28, 29, 23, 29, 24, 30, 31, 25, 31, 32, 26, 32, 33, 27, 27, 33, 34, 28, 34, 35, 29, 35, 30, 30,
			36, 37, 31, 37, 38, 32, 38, 39, 39, 40, 34, 40, 41, 35, 41, 36, 30, 36, 42, 43, 37, 43, 44, 38, 44, 45, 45,
			46, 40, 46, 47, 41, 47, 42, 36, 42, 48, 49, 43, 49, 50, 44, 50, 51, 51, 52, 46, 52, 53, 47, 53, 48, 42, 48,
			54, 55, 49, 55, 56, 50, 56, 57, 57, 58, 52, 58, 59, 53, 59, 54, 48, 54, 60, 61, 55, 61, 62, 56, 62, 63, 63,
			64, 58, 64, 65, 59, 65, 60, 54, 66, 67, 61, 67, 68, 62, 68, 69, 63, 63, 69, 70, 64, 70, 71, 65, 71, 66, 72,
			73, 67, 73, 74, 68, 74, 75, 69, 69, 75, 76, 70, 76, 77, 71, 77, 72, 78, 79, 73, 79, 80, 74, 80, 81, 75, 75,
			81, 82, 76, 82, 83, 77, 83, 78, 84, 85, 79, 85, 86, 80, 86, 87, 81, 81, 87, 88, 82, 88, 89, 83, 89, 84, 90,
			91, 85, 91, 92, 86, 92, 93, 87, 87, 93, 94, 88, 94, 95, 89, 95, 90, 90, 96, 97, 91, 97, 98, 92, 98, 99, 99,
			100, 94, 100, 101, 95, 101, 96, 90, 96, 102, 103, 97, 103, 104, 98, 104, 105, 105, 106, 100, 106, 107, 101,
			107, 102, 96, 102, 108, 109, 103, 109, 110, 104, 110, 111, 111, 112, 106, 112, 113, 107, 113, 108, 102, 108,
			114, 115, 109, 115, 116, 110, 116, 117, 117, 118, 112, 118, 119, 113, 119, 114, 108, 114, 0, 1, 115, 1, 2,
			116, 2, 3, 3, 4, 118, 4, 5, 119, 5, 0, 114 };
	int[] RingNormalIndices = { 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 1, 1, 1, 7, 7, 7, 8, 8,
			8, 4, 4, 4, 9, 9, 9, 10, 10, 10, 1, 1, 1, 11, 11, 11, 12, 12, 12, 4, 4, 4, 13, 13, 13, 14, 14, 14, 1, 1, 1,
			15, 15, 15, 16, 16, 16, 4, 4, 4, 17, 17, 17, 18, 18, 18, 1, 1, 1, 19, 19, 19, 20, 20, 20, 4, 4, 4, 21, 21,
			21, 22, 22, 22, 1, 1, 1, 23, 23, 23, 24, 24, 24, 4, 4, 4, 25, 25, 25, 26, 26, 26, 1, 1, 1, 27, 27, 27, 28,
			28, 28, 4, 4, 4, 29, 29, 29, 30, 30, 30, 1, 1, 1, 31, 31, 31, 32, 32, 32, 4, 4, 4, 33, 33, 33, 34, 34, 34,
			1, 1, 1, 35, 35, 35, 36, 36, 36, 4, 4, 4, 37, 37, 37, 38, 38, 38, 1, 1, 1, 39, 39, 39, 40, 40, 40, 4, 4, 4,
			41, 41, 41, 2, 2, 2, 1, 1, 1, 0, 0, 0, 5, 5, 5, 4, 4, 4, 3, 3, 3, 7, 7, 7, 1, 1, 1, 6, 6, 6, 9, 9, 9, 4, 4,
			4, 8, 8, 8, 11, 11, 11, 1, 1, 1, 10, 10, 10, 13, 13, 13, 4, 4, 4, 12, 12, 12, 15, 15, 15, 1, 1, 1, 14, 14,
			14, 17, 17, 17, 4, 4, 4, 16, 16, 16, 19, 19, 19, 1, 1, 1, 18, 18, 18, 21, 21, 21, 4, 4, 4, 20, 20, 20, 23,
			23, 23, 1, 1, 1, 22, 22, 22, 25, 25, 25, 4, 4, 4, 24, 24, 24, 27, 27, 27, 1, 1, 1, 26, 26, 26, 29, 29, 29,
			4, 4, 4, 28, 28, 28, 31, 31, 31, 1, 1, 1, 30, 30, 30, 33, 33, 33, 4, 4, 4, 32, 32, 32, 35, 35, 35, 1, 1, 1,
			34, 34, 34, 37, 37, 37, 4, 4, 4, 36, 36, 36, 39, 39, 39, 1, 1, 1, 38, 38, 38, 41, 41, 41, 4, 4, 4, 40, 40,
			40, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 1, 1, 1, 7, 7, 7, 8, 8, 8, 4, 4, 4, 9, 9,
			9, 10, 10, 10, 1, 1, 1, 11, 11, 11, 12, 12, 12, 4, 4, 4, 13, 13, 13, 14, 14, 14, 1, 1, 1, 15, 15, 15, 16,
			16, 16, 4, 4, 4, 17, 17, 17, 18, 18, 18, 1, 1, 1, 19, 19, 19, 20, 20, 20, 4, 4, 4, 21, 21, 21, 22, 22, 22,
			1, 1, 1, 23, 23, 23, 24, 24, 24, 4, 4, 4, 25, 25, 25, 26, 26, 26, 1, 1, 1, 27, 27, 27, 28, 28, 28, 4, 4, 4,
			29, 29, 29, 30, 30, 30, 1, 1, 1, 31, 31, 31, 32, 32, 32, 4, 4, 4, 33, 33, 33, 34, 34, 34, 1, 1, 1, 35, 35,
			35, 36, 36, 36, 4, 4, 4, 37, 37, 37, 38, 38, 38, 1, 1, 1, 39, 39, 39, 40, 40, 40, 4, 4, 4, 41, 41, 41, 2, 2,
			2, 1, 1, 1, 0, 0, 0, 5, 5, 5, 4, 4, 4, 3, 3, 3, 7, 7, 7, 1, 1, 1, 6, 6, 6, 9, 9, 9, 4, 4, 4, 8, 8, 8, 11,
			11, 11, 1, 1, 1, 10, 10, 10, 13, 13, 13, 4, 4, 4, 12, 12, 12, 15, 15, 15, 1, 1, 1, 14, 14, 14, 17, 17, 17,
			4, 4, 4, 16, 16, 16, 19, 19, 19, 1, 1, 1, 18, 18, 18, 21, 21, 21, 4, 4, 4, 20, 20, 20, 23, 23, 23, 1, 1, 1,
			22, 22, 22, 25, 25, 25, 4, 4, 4, 24, 24, 24, 27, 27, 27, 1, 1, 1, 26, 26, 26, 29, 29, 29, 4, 4, 4, 28, 28,
			28, 31, 31, 31, 1, 1, 1, 30, 30, 30, 33, 33, 33, 4, 4, 4, 32, 32, 32, 35, 35, 35, 1, 1, 1, 34, 34, 34, 37,
			37, 37, 4, 4, 4, 36, 36, 36, 39, 39, 39, 1, 1, 1, 38, 38, 38, 41, 41, 41, 4, 4, 4, 40, 40, 40 };

	/**
	 * makeObject() - create an object
	 */
	private void makeObject(int[] Elements, int[] NormalIndices, float[] Vertices, float[] Normals) {

		for (int i = 0; i < Elements.length - 2; i += 3) {

			// calculate the base indices of the three vertices
			int point1 = 3 * Elements[i]; // slots 0, 1, 2
			int point2 = 3 * Elements[i + 1]; // slots 3, 4, 5
			int point3 = 3 * Elements[i + 2]; // slots 6, 7, 8

			int normal1 = 3 * NormalIndices[i];
			int normal2 = 3 * NormalIndices[i + 1];
			int normal3 = 3 * NormalIndices[i + 2];

			addTriangleWithNorms(Vertices[point1 + 0], Vertices[point1 + 1], Vertices[point1 + 2], Normals[normal1 + 0],
					Normals[normal1 + 1], Normals[normal1 + 2],

					Vertices[point2 + 0], Vertices[point2 + 1], Vertices[point2 + 2], Normals[normal2 + 0],
					Normals[normal2 + 1], Normals[normal2 + 2],

					Vertices[point3 + 0], Vertices[point3 + 1], Vertices[point3 + 2], Normals[normal3 + 0],
					Normals[normal3 + 1], Normals[normal3 + 2]);
		}
	}

	//
	// The quad is parallel to the XY plane with the front face
	// pointing down the +Z axis
	//

	/**
	 * Each group of three values specifies a quad vertex
	 */
	float[] quadVertices = {
			// top row
			-0.50f, 0.50f, 0.50f, -0.25f, 0.50f, 0.50f, 0.00f, 0.50f, 0.50f, 0.25f, 0.50f, 0.50f, 0.50f, 0.50f, 0.50f,
			// second row
			-0.50f, 0.25f, 0.50f, -0.25f, 0.25f, 0.50f, 0.00f, 0.25f, 0.50f, 0.25f, 0.25f, 0.50f, 0.50f, 0.25f, 0.50f,
			// third (middle) row
			-0.50f, 0.00f, 0.50f, -0.25f, 0.00f, 0.50f, 0.00f, 0.00f, 0.50f, 0.25f, 0.00f, 0.50f, 0.50f, 0.00f, 0.50f,
			// fourth row
			-0.50f, -0.25f, 0.50f, -0.25f, -0.25f, 0.50f, 0.00f, -0.25f, 0.50f, 0.25f, -0.25f, 0.50f, 0.50f, -0.25f,
			0.50f,
			// fifth (last) row
			-0.50f, -0.50f, 0.50f, -0.25f, -0.50f, 0.50f, 0.00f, -0.50f, 0.50f, 0.25f, -0.50f, 0.50f, 0.50f, -0.50f,
			0.50f };

	/**
	 * Each pair of values specifies a vertex's texture coordinates
	 */

	float[] quadUV = {
			// top row
			0.00f, 1.00f, 0.25f, 1.00f, 0.50f, 1.00f, 0.75f, 1.00f, 1.00f, 1.00f,
			// second row
			0.00f, 0.75f, 0.25f, 0.75f, 0.50f, 0.75f, 0.75f, 0.75f, 1.00f, 0.75f,
			// third (middle) row
			0.00f, 0.50f, 0.25f, 0.50f, 0.50f, 0.50f, 0.75f, 0.50f, 1.00f, 0.50f,
			// fourth row
			0.00f, 0.25f, 0.25f, 0.25f, 0.50f, 0.25f, 0.75f, 0.25f, 1.00f, 0.25f,
			// fifth (last) row
			0.00f, 0.00f, 0.25f, 0.00f, 0.50f, 0.00f, 0.75f, 0.00f, 1.00f, 0.00f };

	/**
	 * Because the quad faces +Z, all the normals are (0,0,1)
	 */
	float[] quadNormals = { 0.0f, 0.0f, 1.0f };

	/**
	 * Each group of three entries specifies a triangle for the quad
	 */
	int[] quadElements = {
			// top row
			0, 5, 1, 5, 6, 1, 1, 6, 2, 6, 7, 2, 2, 7, 3, 7, 8, 3, 3, 8, 4, 8, 9, 4,
			// second row
			5, 10, 6, 10, 11, 6, 6, 11, 7, 11, 12, 7, 7, 12, 8, 12, 13, 8, 8, 13, 9, 13, 14, 9,
			// third row
			10, 15, 11, 15, 16, 11, 11, 16, 12, 16, 17, 12, 12, 17, 13, 17, 18, 13, 13, 18, 14, 18, 19, 14,
			// fourth row
			15, 20, 16, 20, 21, 16, 16, 21, 17, 21, 22, 17, 17, 22, 18, 22, 23, 18, 18, 23, 19, 23, 24, 19 };

	/**
	 * makeQuad() - create a quad object
	 */
	private void makeQuad() {
		int i;

		for (i = 0; i < quadElements.length - 2; i += 3) {

			// Calculate the base indices of the three vertices
			int point1 = 3 * quadElements[i]; // slots 0, 1, 2
			int point2 = 3 * quadElements[i + 1]; // slots 3, 4, 5
			int point3 = 3 * quadElements[i + 2]; // slots 6, 7, 8

			// Calculate the base indices of the three texture coordinates
			int normal1 = 2 * quadElements[i]; // slots 0, 1, 2
			int normal2 = 2 * quadElements[i + 1]; // slots 3, 4, 5
			int normal3 = 2 * quadElements[i + 2]; // slots 6, 7, 8

			// Add triangle and texture coordinates
			addTriangleWithUV(quadVertices[point1 + 0], quadVertices[point1 + 1], quadVertices[point1 + 2],
					quadUV[normal1 + 0], quadUV[normal1 + 1], quadVertices[point2 + 0], quadVertices[point2 + 1],
					quadVertices[point2 + 2], quadUV[normal2 + 0], quadUV[normal2 + 1], quadVertices[point3 + 0],
					quadVertices[point3 + 1], quadVertices[point3 + 2], quadUV[normal3 + 0], quadUV[normal3 + 1]);

		}

	}

	/**
	 * Make either a quad or teapot
	 * 
	 * @param choice
	 *            - 0 for quad, 1 for teapot
	 */
	public void makeShape(int choice) {
		if (choice == shapes.OBJ_QUAD) {
			
			makeQuad();
			
		} else if (choice == shapes.OBJ_SPHERE || choice == shapes.OBJ_RING) {
			
			makeObject(SphereElements, SphereNormalIndices, SphereVertices, SphereNormals);
			makeObject(RingElements, RingNormalIndices, RingVertices, RingNormals);
			
		} else if (choice == shapes.OBJ_WING || choice == shapes.OBJ_TAIL || choice == shapes.OBJ_CUBE) {
			
			makeObject(WingElements, WingNormalIndices, WingVertices, WingNormals);
			makeObject(TailElements, TailNormalIndices, TailVertices, TailNormals);
			makeObject(CubeElements, CubeNormalIndices, CubeVertices, CubeNormals);
		}

	}
}
